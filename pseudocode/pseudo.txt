\documentclass{article}
\usepackage{algorithm}
\usepackage{algcompatible}


\begin{document}
\begin{algorithm}
\caption{Calculate best paths for buses}

\label{alg:CalcBusesPath}

\begin{algorithmic} [1]
\STATE {Input: prisioners, buses, graph}
\STATE {Output: paths of all buses}\\

\STATE $results$ $\gets$ [ ]
\FORALL{\texttt{prisoners}}
\IF{!findBusType($prisoner$)}
\STATE\texttt{setType($prisoner$, 'Any')}
\ENDIF
\ENDFOR\\

\FORALL{\texttt{buses}}
\STATE $destinations$ $\gets$ [ ]
\FORALL{\texttt{prisoners}}
\IF{hasPath($bus$,$prisoner$)}
\IF{checkType($bus$,$prisoner$)}
\STATE \texttt{add($destinations$, $prisoner$)}
\ENDIF
\ELSE
\STATE erase($prisoner$)
\ENDIF
\ENDFOR
\STATE $bus.destinations$ $\gets$ $destinations$
\ENDFOR\\

\WHILE{any bus destinations not empty}

\STATE $ignoredVertexes$ $\gets$ [ ]

\FORALL{buses}

\IF{!empty($bus.destinations$)} 
\STATE $hadAction$ $\gets$ false
\STATE dijkstra($bus.location$)
\STATE $nextDest$ $\gets$ pop($bus.destinations$)
\STATE $pathToNext$ $\gets$ getPath($bus.location$, $nextDest$)
\STATE $currentLocation$ $\gets$ $bus.location$
\STATE $bus.location$ $\gets$ $nextDest$


\STATE prisonerLoop:
\FORALL{\texttt{prisoners}}
\IF{$prisioner.weight > bus.capacity$}
\STATE \textbf{go to} \emph{prisonerLoop}
\ENDIF
\IF{$prisioner.start$ = $bus.location$ and !pickedUp($prisoner$) and checkType($bus$,$prisoner$)}
\STATE $currentNextDist$ $\gets$ dist($nextDest$)

\FORALL{buses as $bus2$}
\STATE djikstra($bus2.location$)
\STATE $nextDist$ $\gets$ dist($nextDest$)
\STATE $ignoreDest$ $\gets$ false

\FORALL{\texttt{prisoners as $prisoner1$}}
\IF{$bus$!=$bus2$ and pickedUp($prisoner1$) and !delivered($prisoner1$) and getBus($prisoner1$)=$bus2$ and checkType($bus2$,$prisoner1$)}
\STATE dijkstra(destination($prisoner1$))
\IF{dist($nextDest$)$<nextDist$}
\STATE add($ignoredVertexes$, $nextDest$)
\STATE $ignoreDest$ $\gets$ true
\STATE \textbf{break loop}
\ENDIF
\ENDIF
\ENDFOR


\algstore{myalg}
\end{algorithmic}
\end{algorithm}

\begin{algorithm} 
\begin{algorithmic} [1]
\algrestore{myalg}


\IF{$ignoreDest$}
\STATE \textbf{break loop}
\ENDIF


\IF{$bus$!=$bus2$ and $currentNextDist$ $>nextDist$ and checkType($bus2$,$prisoner$)}
\STATE add($ignoredVertexes$,$nextDest$)
\STATE \textbf{break loop}
\ELSIF{$bus2$ = lastBus}
\IF{canFit($bus$, $prisoner$)}
\STATE pickUp($prisoner$, $bus$)
\STATE add($bus.destinations$, destination($prisoner$))
\ENDIF
\ENDIF


\ENDFOR

\ELSIF{destination($prisoner$)=$bus.location$ and pickedUp($prisoner$) and getBus($prisoner$)=$bus$}
\STATE deliver($prisoner$, $bus$)
\STATE $hadAction$ $\gets$ true
\ENDIF

\ENDFOR

\IF{$hadAction$ or empty($bus.destinations$)}
\IF{!$hadAction$}
\STATE $bus.location$ $\gets$ $currentLocation$
\ENDIF
\FORALL{$ignoredVertexes$}
\STATE addDestination($bus$, $ignoredVertex$)
\ENDFOR
\STATE $ignoredVertexes$ $\gets$ [ ]
\ELSE
\STATE $bus.location$ $\gets$ $currentLocation$
\STATE \textbf{repeat loop iteration}
\ENDIF

\IF{$hadAction$}
\STATE $results$[$bus$] $\gets$ $pathToNext$
\ENDIF

\ENDIF
\ENDFOR

\ENDWHILE\\
\STATE \textbf{returns} $results$

\end{algorithmic}
\end{algorithm}
\end{document}